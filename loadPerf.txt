--
--present
--
--Author: ArqiTek
--Copyright 2250

--os.unloadAPI("perf")
os.loadAPI("perf")

print("hello")

function printUsage()
  print( "Usage: load <menu file>" )
  return
end

local tArgs = { ... }
if #tArgs < 1 then
  printUsage()
  return
end

local file = tArgs[1]

function findfunction(x)
  assert(type(x) == "string")
  local f=funList
  for v in x:gmatch("[^%.]+") do
    if type(f) ~= "table" then
       return nil, "looking for '"..v.."' expected table, not "..type(f)
    end
    f=f[v]
  end
  if type(f) == "function" then
    return f
  else
    return nil, "expected function, not "..type(f)
  end
end

function runnable(root,ui,door)
  items = {}
  values = {}
  for i = 1, #root, 2 do
    table.insert(items,root[i])
    table.insert(values,root[i+1])
  end
  print("ui init for "..door.monitor)
  ui:init(door.monitor, title)
  if ui:drawMain(items) then
    activeMonitor = ui:getMonitor()
    v = values[ui.select]
    if  type(v) == "string" then
      assert(findfunction(v))()
    else
      runnable(v,ui,door)
    end
  end
end

function loadMenus(root,doors,ui1,ui2)
  --while true do
    print("running parralel")
    parallel.waitForAny(
      runnable(root,ui1,doors[1]),
      runnable(root,ui2,doors[2]))
    print("Cycling runnables")
  --end
end

print("startnew uis")
ui1 = perf.Perf:new()
ui2 = perf.Perf:new()
print("new uis")
dofile(file)
loadMenus(root,doors,ui1,ui2)
